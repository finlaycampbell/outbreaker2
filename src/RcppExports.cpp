// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_are_possible_ancestors
std::vector<int> cpp_are_possible_ancestors(Rcpp::IntegerVector t_inf, size_t i);
RcppExport SEXP _outbreaker2_cpp_are_possible_ancestors(SEXP t_infSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_are_possible_ancestors(t_inf, i));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sample1
size_t cpp_sample1(std::vector<int> x);
RcppExport SEXP _outbreaker2_cpp_sample1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sample1(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pick_possible_ancestor
size_t cpp_pick_possible_ancestor(Rcpp::IntegerVector t_inf, size_t i);
RcppExport SEXP _outbreaker2_cpp_pick_possible_ancestor(SEXP t_infSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pick_possible_ancestor(t_inf, i));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_descendents
Rcpp::IntegerVector cpp_find_descendents(Rcpp::IntegerVector alpha, size_t i);
RcppExport SEXP _outbreaker2_cpp_find_descendents(SEXP alphaSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_descendents(alpha, i));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_local_cases
Rcpp::IntegerVector cpp_find_local_cases(Rcpp::IntegerVector alpha, size_t i);
RcppExport SEXP _outbreaker2_cpp_find_local_cases(SEXP alphaSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_local_cases(alpha, i));
    return rcpp_result_gen;
END_RCPP
}
// cpp_swap_cases
Rcpp::List cpp_swap_cases(Rcpp::List param, size_t i, bool swap_place);
RcppExport SEXP _outbreaker2_cpp_swap_cases(SEXP paramSEXP, SEXP iSEXP, SEXP swap_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< bool >::type swap_place(swap_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_swap_cases(param, i, swap_place));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_n_mutations
size_t cpp_get_n_mutations(Rcpp::List data, size_t i, size_t j);
RcppExport SEXP _outbreaker2_cpp_get_n_mutations(SEXP dataSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_n_mutations(data, i, j));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lookup_sequenced_ancestor
Rcpp::List cpp_lookup_sequenced_ancestor(Rcpp::List data, Rcpp::List param, size_t i);
RcppExport SEXP _outbreaker2_cpp_lookup_sequenced_ancestor(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lookup_sequenced_ancestor(data, param, i));
    return rcpp_result_gen;
END_RCPP
}
// is_between_place
bool is_between_place(Rcpp::NumericMatrix place_matrix, Rcpp::IntegerVector t_inf, Rcpp::IntegerVector t_onw, Rcpp::IntegerVector alpha, int C_ind, size_t j);
RcppExport SEXP _outbreaker2_is_between_place(SEXP place_matrixSEXP, SEXP t_infSEXP, SEXP t_onwSEXP, SEXP alphaSEXP, SEXP C_indSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type place_matrix(place_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_onw(t_onwSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type C_ind(C_indSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(is_between_place(place_matrix, t_inf, t_onw, alpha, C_ind, j));
    return rcpp_result_gen;
END_RCPP
}
// get_transition_mat
Rcpp::NumericVector get_transition_mat(Rcpp::NumericMatrix p_trans, Rcpp::NumericVector p_place, Rcpp::NumericVector p_place_adj, double eps, double tau, double prop_place_unobserved, int max_kappa);
RcppExport SEXP _outbreaker2_get_transition_mat(SEXP p_transSEXP, SEXP p_placeSEXP, SEXP p_place_adjSEXP, SEXP epsSEXP, SEXP tauSEXP, SEXP prop_place_unobservedSEXP, SEXP max_kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p_trans(p_transSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p_place(p_placeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p_place_adj(p_place_adjSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type prop_place_unobserved(prop_place_unobservedSEXP);
    Rcpp::traits::input_parameter< int >::type max_kappa(max_kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_transition_mat(p_trans, p_place, p_place_adj, eps, tau, prop_place_unobserved, max_kappa));
    return rcpp_result_gen;
END_RCPP
}
// get_marginal_trans
Eigen::MatrixXd get_marginal_trans(Eigen::MatrixXd p_trans, Eigen::VectorXd p_place, Eigen::VectorXd p_place_adj);
RcppExport SEXP _outbreaker2_get_marginal_trans(SEXP p_transSEXP, SEXP p_placeSEXP, SEXP p_place_adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type p_trans(p_transSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p_place(p_placeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p_place_adj(p_place_adjSEXP);
    rcpp_result_gen = Rcpp::wrap(get_marginal_trans(p_trans, p_place, p_place_adj));
    return rcpp_result_gen;
END_RCPP
}
// t_inf_change
Rcpp::NumericMatrix t_inf_change(Rcpp::List data, Rcpp::IntegerVector alpha, Rcpp::IntegerVector kappa, size_t p, size_t t_inf_1, size_t t_inf_2);
RcppExport SEXP _outbreaker2_t_inf_change(SEXP dataSEXP, SEXP alphaSEXP, SEXP kappaSEXP, SEXP pSEXP, SEXP t_inf_1SEXP, SEXP t_inf_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< size_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< size_t >::type t_inf_1(t_inf_1SEXP);
    Rcpp::traits::input_parameter< size_t >::type t_inf_2(t_inf_2SEXP);
    rcpp_result_gen = Rcpp::wrap(t_inf_change(data, alpha, kappa, p, t_inf_1, t_inf_2));
    return rcpp_result_gen;
END_RCPP
}
// alpha_change
Rcpp::NumericMatrix alpha_change(Rcpp::List data, size_t p, size_t kappa, size_t t_inf, size_t alpha_1, size_t alpha_2);
RcppExport SEXP _outbreaker2_alpha_change(SEXP dataSEXP, SEXP pSEXP, SEXP kappaSEXP, SEXP t_infSEXP, SEXP alpha_1SEXP, SEXP alpha_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< size_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< size_t >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< size_t >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< size_t >::type alpha_1(alpha_1SEXP);
    Rcpp::traits::input_parameter< size_t >::type alpha_2(alpha_2SEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_change(data, p, kappa, t_inf, alpha_1, alpha_2));
    return rcpp_result_gen;
END_RCPP
}
// local_n_contacts
Rcpp::NumericMatrix local_n_contacts(Rcpp::List data, Rcpp::List param, Rcpp::IntegerVector p);
RcppExport SEXP _outbreaker2_local_n_contacts(SEXP dataSEXP, SEXP paramSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(local_n_contacts(data, param, p));
    return rcpp_result_gen;
END_RCPP
}
// kappa_change
Rcpp::NumericMatrix kappa_change(Rcpp::List data, Rcpp::List param, size_t p, size_t t_inf, size_t alpha, size_t kappa1, size_t kappa2);
RcppExport SEXP _outbreaker2_kappa_change(SEXP dataSEXP, SEXP paramSEXP, SEXP pSEXP, SEXP t_infSEXP, SEXP alphaSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< size_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< size_t >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< size_t >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< size_t >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< size_t >::type kappa2(kappa2SEXP);
    rcpp_result_gen = Rcpp::wrap(kappa_change(data, param, p, t_inf, alpha, kappa1, kappa2));
    return rcpp_result_gen;
END_RCPP
}
// swap_cases_change
Rcpp::NumericMatrix swap_cases_change(Rcpp::List data, Rcpp::List param, Rcpp::List new_param, size_t i, Rcpp::IntegerVector alpha, Rcpp::IntegerVector t_inf, Rcpp::IntegerVector kappa, Rcpp::IntegerVector local_cases, size_t n_mat);
RcppExport SEXP _outbreaker2_swap_cases_change(SEXP dataSEXP, SEXP paramSEXP, SEXP new_paramSEXP, SEXP iSEXP, SEXP alphaSEXP, SEXP t_infSEXP, SEXP kappaSEXP, SEXP local_casesSEXP, SEXP n_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type new_param(new_paramSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type local_cases(local_casesSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_mat(n_matSEXP);
    rcpp_result_gen = Rcpp::wrap(swap_cases_change(data, param, new_param, i, alpha, t_inf, kappa, local_cases, n_mat));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_ancestors
Rcpp::NumericMatrix cpp_find_ancestors(Rcpp::IntegerVector alpha, Rcpp::NumericMatrix ancestors, SEXP i);
RcppExport SEXP _outbreaker2_cpp_find_ancestors(SEXP alphaSEXP, SEXP ancestorsSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ancestors(ancestorsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_ancestors(alpha, ancestors, i));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_mrca
Rcpp::IntegerVector cpp_find_mrca(size_t i, size_t j, Rcpp::NumericMatrix ancestors);
RcppExport SEXP _outbreaker2_cpp_find_mrca(SEXP iSEXP, SEXP jSEXP, SEXP ancestorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ancestors(ancestorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_mrca(i, j, ancestors));
    return rcpp_result_gen;
END_RCPP
}
// update_mrca
Rcpp::NumericMatrix update_mrca(Rcpp::NumericMatrix combn, Rcpp::NumericMatrix ancestors);
RcppExport SEXP _outbreaker2_update_mrca(SEXP combnSEXP, SEXP ancestorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type combn(combnSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ancestors(ancestorsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mrca(combn, ancestors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_genetic
double cpp_ll_genetic(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_genetic(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_genetic(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_timing_infections
double cpp_ll_timing_infections(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_timing_infections(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing_infections(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_timing_sampling
double cpp_ll_timing_sampling(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_timing_sampling(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing_sampling(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_reporting
double cpp_ll_reporting(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_reporting(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_reporting(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_contact
double cpp_ll_contact(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_contact(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_contact(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_timeline
double cpp_ll_timeline(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_ll_timeline(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timeline(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_timing
double cpp_ll_timing(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_functions);
RcppExport SEXP _outbreaker2_cpp_ll_timing(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing(data, param, i, custom_functions));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ll_all
double cpp_ll_all(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_functions);
RcppExport SEXP _outbreaker2_cpp_ll_all(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_all(data, param, i, custom_functions));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_mu
Rcpp::List cpp_move_mu(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_mu(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_mu(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_pi
Rcpp::List cpp_move_pi(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_pi(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_pi(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_tau
Rcpp::List cpp_move_tau(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_tau(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_tau(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_eps
Rcpp::List cpp_move_eps(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_eps(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_eps(param, data, config, list_custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_eta
Rcpp::List cpp_move_eta(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_eta(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_eta(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_lambda
Rcpp::List cpp_move_lambda(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
RcppExport SEXP _outbreaker2_cpp_move_lambda(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_lambda(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_t_inf
Rcpp::List cpp_move_t_inf(Rcpp::List param, Rcpp::List data, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_t_inf(SEXP paramSEXP, SEXP dataSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_t_inf(param, data, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_alpha
Rcpp::List cpp_move_alpha(Rcpp::List param, Rcpp::List data, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_alpha(SEXP paramSEXP, SEXP dataSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_alpha(param, data, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_model
Rcpp::List cpp_move_model(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_model(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_model(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_joint
Rcpp::List cpp_move_joint(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_joint(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_joint(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_swap_cases
Rcpp::List cpp_move_swap_cases(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_swap_cases(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_swap_cases(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_move_kappa
Rcpp::List cpp_move_kappa(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
RcppExport SEXP _outbreaker2_cpp_move_kappa(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_kappa(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_mu
double cpp_prior_mu(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_mu(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_mu(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_pi
double cpp_prior_pi(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_pi(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_pi(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_tau
double cpp_prior_tau(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_tau(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_tau(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_eps
double cpp_prior_eps(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_eps(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_eps(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_eta
double cpp_prior_eta(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_eta(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_eta(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_lambda
double cpp_prior_lambda(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
RcppExport SEXP _outbreaker2_cpp_prior_lambda(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_lambda(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prior_all
double cpp_prior_all(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_functions);
RcppExport SEXP _outbreaker2_cpp_prior_all(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_all(param, config, custom_functions));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_outbreaker2_cpp_are_possible_ancestors", (DL_FUNC) &_outbreaker2_cpp_are_possible_ancestors, 2},
    {"_outbreaker2_cpp_sample1", (DL_FUNC) &_outbreaker2_cpp_sample1, 1},
    {"_outbreaker2_cpp_pick_possible_ancestor", (DL_FUNC) &_outbreaker2_cpp_pick_possible_ancestor, 2},
    {"_outbreaker2_cpp_find_descendents", (DL_FUNC) &_outbreaker2_cpp_find_descendents, 2},
    {"_outbreaker2_cpp_find_local_cases", (DL_FUNC) &_outbreaker2_cpp_find_local_cases, 2},
    {"_outbreaker2_cpp_swap_cases", (DL_FUNC) &_outbreaker2_cpp_swap_cases, 3},
    {"_outbreaker2_cpp_get_n_mutations", (DL_FUNC) &_outbreaker2_cpp_get_n_mutations, 3},
    {"_outbreaker2_cpp_lookup_sequenced_ancestor", (DL_FUNC) &_outbreaker2_cpp_lookup_sequenced_ancestor, 3},
    {"_outbreaker2_is_between_place", (DL_FUNC) &_outbreaker2_is_between_place, 6},
    {"_outbreaker2_get_transition_mat", (DL_FUNC) &_outbreaker2_get_transition_mat, 7},
    {"_outbreaker2_get_marginal_trans", (DL_FUNC) &_outbreaker2_get_marginal_trans, 3},
    {"_outbreaker2_t_inf_change", (DL_FUNC) &_outbreaker2_t_inf_change, 6},
    {"_outbreaker2_alpha_change", (DL_FUNC) &_outbreaker2_alpha_change, 6},
    {"_outbreaker2_local_n_contacts", (DL_FUNC) &_outbreaker2_local_n_contacts, 3},
    {"_outbreaker2_kappa_change", (DL_FUNC) &_outbreaker2_kappa_change, 7},
    {"_outbreaker2_swap_cases_change", (DL_FUNC) &_outbreaker2_swap_cases_change, 9},
    {"_outbreaker2_cpp_find_ancestors", (DL_FUNC) &_outbreaker2_cpp_find_ancestors, 3},
    {"_outbreaker2_cpp_find_mrca", (DL_FUNC) &_outbreaker2_cpp_find_mrca, 3},
    {"_outbreaker2_update_mrca", (DL_FUNC) &_outbreaker2_update_mrca, 2},
    {"_outbreaker2_cpp_ll_genetic", (DL_FUNC) &_outbreaker2_cpp_ll_genetic, 4},
    {"_outbreaker2_cpp_ll_timing_infections", (DL_FUNC) &_outbreaker2_cpp_ll_timing_infections, 4},
    {"_outbreaker2_cpp_ll_timing_sampling", (DL_FUNC) &_outbreaker2_cpp_ll_timing_sampling, 4},
    {"_outbreaker2_cpp_ll_reporting", (DL_FUNC) &_outbreaker2_cpp_ll_reporting, 4},
    {"_outbreaker2_cpp_ll_contact", (DL_FUNC) &_outbreaker2_cpp_ll_contact, 4},
    {"_outbreaker2_cpp_ll_timeline", (DL_FUNC) &_outbreaker2_cpp_ll_timeline, 4},
    {"_outbreaker2_cpp_ll_timing", (DL_FUNC) &_outbreaker2_cpp_ll_timing, 4},
    {"_outbreaker2_cpp_ll_all", (DL_FUNC) &_outbreaker2_cpp_ll_all, 4},
    {"_outbreaker2_cpp_move_mu", (DL_FUNC) &_outbreaker2_cpp_move_mu, 5},
    {"_outbreaker2_cpp_move_pi", (DL_FUNC) &_outbreaker2_cpp_move_pi, 5},
    {"_outbreaker2_cpp_move_tau", (DL_FUNC) &_outbreaker2_cpp_move_tau, 5},
    {"_outbreaker2_cpp_move_eps", (DL_FUNC) &_outbreaker2_cpp_move_eps, 5},
    {"_outbreaker2_cpp_move_eta", (DL_FUNC) &_outbreaker2_cpp_move_eta, 5},
    {"_outbreaker2_cpp_move_lambda", (DL_FUNC) &_outbreaker2_cpp_move_lambda, 5},
    {"_outbreaker2_cpp_move_t_inf", (DL_FUNC) &_outbreaker2_cpp_move_t_inf, 3},
    {"_outbreaker2_cpp_move_alpha", (DL_FUNC) &_outbreaker2_cpp_move_alpha, 3},
    {"_outbreaker2_cpp_move_model", (DL_FUNC) &_outbreaker2_cpp_move_model, 4},
    {"_outbreaker2_cpp_move_joint", (DL_FUNC) &_outbreaker2_cpp_move_joint, 4},
    {"_outbreaker2_cpp_move_swap_cases", (DL_FUNC) &_outbreaker2_cpp_move_swap_cases, 4},
    {"_outbreaker2_cpp_move_kappa", (DL_FUNC) &_outbreaker2_cpp_move_kappa, 4},
    {"_outbreaker2_cpp_prior_mu", (DL_FUNC) &_outbreaker2_cpp_prior_mu, 3},
    {"_outbreaker2_cpp_prior_pi", (DL_FUNC) &_outbreaker2_cpp_prior_pi, 3},
    {"_outbreaker2_cpp_prior_tau", (DL_FUNC) &_outbreaker2_cpp_prior_tau, 3},
    {"_outbreaker2_cpp_prior_eps", (DL_FUNC) &_outbreaker2_cpp_prior_eps, 3},
    {"_outbreaker2_cpp_prior_eta", (DL_FUNC) &_outbreaker2_cpp_prior_eta, 3},
    {"_outbreaker2_cpp_prior_lambda", (DL_FUNC) &_outbreaker2_cpp_prior_lambda, 3},
    {"_outbreaker2_cpp_prior_all", (DL_FUNC) &_outbreaker2_cpp_prior_all, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_outbreaker2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
